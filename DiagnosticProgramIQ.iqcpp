{"mode":"Text","textContent":"//THIS CODE FOR DIAGNOSTIC OF THE IQ SENSORS\n//\n//DEVELOPED BY KATTE\n//\n//https://github.com/TacocaTYT/VexIQ_Diagnostic_Tool\n//\n//\n//MADE ON 29/11/2021\n\n#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nbumper Bumper3 = bumper(PORT3);\nbumper Bumper9 = bumper(PORT9);\ngyro Gyro4 = gyro(PORT4);\ncolorsensor Color6 = colorsensor(PORT6);\nsonar Distance1 = sonar(PORT1);\n#pragma endregion VEXcode Generated Robot Configuration\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0;\n\nfloat myVariable;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  wait(1.0, seconds);\n  Brain_precision = 0;\n  Color6.setLight(100, percent);\n  while (true) {\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(4, 12);\n    Brain.Screen.print(\"Battery:\");\n    Brain.Screen.setCursor(4, 20);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Brain.Battery.capacity(percent)));\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Distance:\");\n    Brain.Screen.setCursor(2, 1);\n    Brain.Screen.print(\"LBump:\");\n    Brain.Screen.setCursor(5, 1);\n    Brain.Screen.print(\"Bright:\");\n    Brain.Screen.setCursor(5, 12);\n    Brain.Screen.print(\"Hue:\");\n    Brain.Screen.setCursor(3, 1);\n    Brain.Screen.print(\"RBump:\");\n    Brain.Screen.setCursor(4, 1);\n    Brain.Screen.print(\"Heading:\");\n    Brain.Screen.setCursor(1, 10);\n    Brain_precision = -1;\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Distance1.distance(mm)));\n    Brain_precision = 0;\n    Brain.Screen.setCursor(4, 9);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Gyro4.heading()));\n    Brain.Screen.setCursor(5, 8);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(static_cast<float>(Color6.brightness())));\n    Brain.Screen.setCursor(5, 16);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Color6.hue()));\n    if (Bumper3.pressing()) {\n      Brain.Screen.setCursor(2, 7);\n      Brain.Screen.print(\"Pressed\");\n    }\n    if (Bumper9.pressing()) {\n      Brain.Screen.setCursor(3, 7);\n      Brain.Screen.print(\"Pressed\");\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[3],"name":"Bumper3","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[9],"name":"Bumper9","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[4],"name":"Gyro4","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{},"triportSourcePort":22},{"port":[6],"name":"Color6","customName":false,"deviceType":"Color","deviceClass":"colorsensor","setting":{},"triportSourcePort":22},{"port":[1],"name":"Distance1","customName":false,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20210916.19.00.00","appVersion":"","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}